<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><id>/Blog-With-GitHub-Boilerplate/</id><title>豆破苍穹</title><updated>2020-02-05T09:25:48.060293+08:06</updated><author><name>飞奔的土豆</name><email>sdyk88@gmail.com</email></author><link href="/Blog-With-GitHub-Boilerplate/" rel="alternate"/><generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator><logo>/Blog-With-GitHub-Boilerplate/logo.png</logo><subtitle>不知道说点啥</subtitle><entry><id>/Blog-With-GitHub-Boilerplate/archives/typography/</id><title>Hello World!</title><updated>2020-02-05T09:25:48.060672+00:00</updated><author><name>AlanDecode</name><email>sdyk88@gmail.com</email><uri>https://www.google.com</uri></author><content>&lt;div class="notice"&gt;这是一篇示例文章，在这里你可以看到常用页面元素的显示效果，同时也是 Markdown 语法的参考文章。保留或者删除本文，开始自己的创作吧！&lt;/div&gt;&lt;h2&gt;L2 Heading&lt;/h2&gt;
&lt;h3&gt;L3 Heading&lt;/h3&gt;
&lt;h4&gt;L4 Heading&lt;/h4&gt;
&lt;h5&gt;L5 Heading&lt;/h5&gt;
&lt;h6&gt;L6 Heading&lt;/h6&gt;
&lt;h2&gt;Paragraph&lt;/h2&gt;
&lt;p&gt;We are creating a world that all may enter without privilege or prejudice accorded by race, economic power, military force, or station of birth.&lt;/p&gt;
&lt;p&gt;We are creating a world where anyone, anywhere may express his or her beliefs, no matter how singular, without fear of being coerced into silence or conformity.&lt;/p&gt;
&lt;h2&gt;Inline elements&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Bold&lt;/strong&gt;, &lt;ruby&gt;Ruby&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;ルビ&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;, &lt;em&gt;Italic&lt;/em&gt;, &lt;del&gt;Strikethrough&lt;/del&gt;, &lt;a href="https://www.imalan.cn"&gt;Link&lt;/a&gt;&lt;sup id="fn_ref_1"&gt;&lt;a href="#fn_1"&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2&gt;Blockquote and nested blockquote&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;安得广厦千万间，大庇天下寒士俱欢颜！风雨不动安如山。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;呜呼！何时眼前突兀见此屋，吾庐独破受冻死亦足！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;int a=1;&lt;/code&gt;. Code block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello World!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;List&lt;/h2&gt;
&lt;h3&gt;Unordered List&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;iPhone&lt;ul&gt;
&lt;li&gt;iPhone X&lt;/li&gt;
&lt;li&gt;iPhone 11&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;iPad&lt;/li&gt;
&lt;li&gt;MacBook&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ordered List&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;打开冰箱&lt;ol&gt;
&lt;li&gt;右手放在冰箱门拉手上&lt;/li&gt;
&lt;li&gt;左手扶住冰箱主体&lt;/li&gt;
&lt;li&gt;右手向后用力&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;把大象放进冰箱&lt;/li&gt;
&lt;li&gt;关上冰箱&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Horizontal rule&lt;/h2&gt;
&lt;hr&gt;
&lt;h2&gt;Math&lt;/h2&gt;
&lt;p&gt;Inline Math: $m\times n$, math block:&lt;/p&gt;
&lt;p&gt;$$C_{m\times k}=A_{m\times n}\cdot B_{n\times k}$$&lt;/p&gt;
&lt;h2&gt;Figures&lt;/h2&gt;
&lt;h3&gt;Single figure&lt;/h3&gt;
&lt;p&gt;&lt;figure style="flex: 92.88888888888889" &gt;&lt;img width="836" height="450" src="/Blog-With-GitHub-Boilerplate/archives/assets/e0affbc80ccb2d596c87b520e37e7071.jpg" /&gt;&lt;figcaption&gt;Princess Mononoke&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;Photoset&lt;/h3&gt;
&lt;div class="photos"&gt;
&lt;figure style="flex: 75.0" &gt;&lt;img width="4032" height="2688" src="/Blog-With-GitHub-Boilerplate/archives/assets/4956a144888cdbbb6c2df1d1d15384b0.jpeg" /&gt;&lt;/figure&gt;
&lt;figure style="flex: 50.03720238095238" &gt;&lt;img width="2690" height="2688" src="/Blog-With-GitHub-Boilerplate/archives/assets/4c66f0da616b08325b3aaa4c8b3f68e1.jpg" /&gt;&lt;/figure&gt;
&lt;figure style="flex: 75.0" &gt;&lt;img width="4032" height="2688" src="/Blog-With-GitHub-Boilerplate/archives/assets/8b4d2334469ffa39b59e6fdb37c8c601.jpeg" /&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class="photos"&gt;
&lt;figure style="flex: 75.0" &gt;&lt;img width="4032" height="2688" src="/Blog-With-GitHub-Boilerplate/archives/assets/0f5023d542a33e7c9d270f3cd6a99562.jpeg" /&gt;&lt;/figure&gt;
&lt;figure style="flex: 75.0" &gt;&lt;img width="4032" height="2688" src="/Blog-With-GitHub-Boilerplate/archives/assets/20ec69d2a0276336f95e11f42866d17f.jpeg" /&gt;&lt;/figure&gt;
&lt;figure style="flex: 75.0" &gt;&lt;img width="4032" height="2688" src="/Blog-With-GitHub-Boilerplate/archives/assets/2b8af25285e5a193729a350593113bad.jpeg" /&gt;&lt;/figure&gt;&lt;/div&gt;&lt;h2&gt;Table&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;header&lt;/th&gt;
&lt;th&gt;header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cell 1&lt;/td&gt;
&lt;td&gt;cell 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cell 3&lt;/td&gt;
&lt;td&gt;cell 4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Link Card&lt;/h2&gt;
&lt;div class="links"&gt;
&lt;a style="display:block" target="_blank" href="https://www.imalan.cn" class="board-item"&gt;                 &lt;div class="board-thumb"&gt;&lt;img src="https://secure.gravatar.com/avatar/1741a6eef5c824899e347e4afcbaa75d?s=200&amp;r=G&amp;d="&gt;&lt;/div&gt;                 &lt;div class="board-title"&gt;AlanDecode&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;hr&gt;&lt;div class="footnotes"&gt;&lt;ol&gt;&lt;li id="fn_1"&gt;Home page for AlanDecode &lt;a no-style href="#fn_ref_1"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content><link href="/Blog-With-GitHub-Boilerplate/archives/typography/" rel="alternate"/><published>2019-12-18T16:50:00+08:06</published></entry><entry><id>/Blog-With-GitHub-Boilerplate/archives/centos76_env_prepare/</id><title>CentOS7.6环境搭建</title><updated>2020-02-05T09:25:48.060637+00:00</updated><author><name>None</name><email>sdyk88@gmail.com</email><uri>https://www.google.com</uri></author><content>&lt;h2&gt;系统环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows 10 &lt;strong&gt;1809或更高&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;启用WSL&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Distro下载&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yuk7/CentWSL"&gt;CentWSL 7.6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;安装步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;解压下载下来的zip文件，得到&lt;code&gt;CentOS7&lt;/code&gt;目录，其中包含了&lt;code&gt;CentOS7.exe&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;将该目录移到希望安装的目录下，官方建议最好是&lt;code&gt;C:\&lt;/code&gt;下，我尝试过安装到&lt;code&gt;D:\&lt;/code&gt;，暂未发现不妥。&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tip&lt;/strong&gt; 因为办公用电脑使用了域用户管理，禁用了admin。这种情况下，安装目录必须放到&lt;code&gt;C:\Users\XXX&lt;/code&gt;下，否则会因为权限不足导致安装失败。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tip&lt;/strong&gt; 如果同一个distro希望安装多个实例，可以将&lt;code&gt;CentOS7&lt;/code&gt;的目录名和目录下的&lt;code&gt;CentOS7.exe&lt;/code&gt;文件名修改为其他（目录名和exe文件名保持一致），比如&lt;code&gt;MyCentOS7&lt;/code&gt;、&lt;code&gt;MyCentOS7.exe&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;双击exe等待安装完成。&lt;/li&gt;
&lt;li&gt;安装完成后双击exe，或者cmd中输入wsl（如果当前distro是唯一的wsl实例的话），就可以进入到CentOS的shell中了。&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tip&lt;/strong&gt; 在cmd中，输入&lt;code&gt;wslconfig /l&lt;/code&gt;可以查看当前安装了哪些distro实例；输入&lt;code&gt;wslconfig /s CentOS7&lt;/code&gt;可以将wsl默认实例改为CentOS7。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;一些设置和优化&lt;/h2&gt;
&lt;div class="notice"&gt;如无特别说明，使用root完成下面的操作。&lt;/div&gt;&lt;h3&gt;账户管理&lt;/h3&gt;
&lt;p&gt;该distro安装后，默认进入的账户是root。建议新建用户自己的账户：
&lt;code&gt;useradd testuser -d /home/testuser&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;回到cmd中，进入CentOS7的安装目录下，可以通过命令指定进入wsl时的默认用户：
&lt;code&gt;CentOS7.exe config --default-user testuser&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tip&lt;/strong&gt; 以默认用户进入wsl时，会自动继承Windows的PATH变量，即可以直接使用Windows系统自带的exe命令；非默认用户如果也想继承，只能手动export。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果想以root用户登录，可以在wsl里，授予用户&lt;code&gt;sudo su -&lt;/code&gt;权限；也可以直接在cmd中运行以下命令：
&lt;code&gt;wsl -u root&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;WSL启动配置&lt;/h3&gt;
&lt;p&gt;wsl允许配置&lt;code&gt;/etc/wsl.conf&lt;/code&gt;以在启动时完成自动配置。（详见&lt;a href="https://devblogs.microsoft.com/commandline/automatically-configuring-wsl/"&gt;Automatically Configuring WSL&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;为了能以正常权限将Windows下的盘符挂载到wsl中，可以采用以下wsl.conf：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;automount&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /mnt
&lt;span class="nv"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;metadata,uid=1000,gid=1000,dmask=022,fmask=033&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;mountFsTab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该配置会以&lt;code&gt;uid=1000,gid=1000&lt;/code&gt;的属主（如果按上面的操作执行，这里&lt;code&gt;uid=1000&lt;/code&gt;的用户应该正是&lt;code&gt;testuser&lt;/code&gt;）挂载盘符到&lt;code&gt;/mnt&lt;/code&gt;下，默认的目录权限为0755，默认的文件权限为0744。&lt;/p&gt;
&lt;p&gt;可以自定options，但最好保证文件具备x权限，否则windows的exe可能无法在wsl中运行。&lt;/p&gt;
&lt;h3&gt;systemctl&lt;/h3&gt;
&lt;p&gt;CentOS的wsl目前无法运行&lt;code&gt;systemctl&lt;/code&gt;系列命令（据说是wsl底层问题，可能等wsl2发布后会修复）。幸运的是可以借用&lt;a href="https://github.com/gdraheim/docker-systemctl-replacement"&gt;docker-systemctl-replacement&lt;/a&gt;实现同样效果。方法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /usr/bin
mv systemctl systemctl.old &lt;span class="c1"&gt;# 备份下老的&lt;/span&gt;
curl https://raw.githubusercontent.com/gdraheim/docker-systemctl-replacement/master/files/docker/systemctl.py &amp;gt; /tmp/systemctl.py &lt;span class="c1"&gt;# 只需使用这个python脚本&lt;/span&gt;
mv /tmp/systemctl.py /usr/bin/systemctl
chmod +x /usr/bin/systemctl &lt;span class="c1"&gt;# 增加可执行权限&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;SSH&lt;/h3&gt;
&lt;p&gt;如果想用SecureCRT等终端连接到wsl，需要启用ssh。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行&lt;code&gt;ssh-keygen -A&lt;/code&gt;以生成默认key，否则sshd会启动失败。&lt;/li&gt;
&lt;li&gt;配置&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;。&lt;strong&gt;建议&lt;code&gt;UseDNS no&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;根据上一节提供的方法以启用&lt;code&gt;systemctl&lt;/code&gt;，执行&lt;code&gt;systemctl start sshd&lt;/code&gt;以启动sshd。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;systemctl status sshd&lt;/code&gt;检查是否运行成功。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果希望开机启动sshd，可按以下步骤完成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在wsl下，新建文件&lt;code&gt;/etc/init.wsl&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#! /bin/bash&lt;/span&gt;
 service sshd &lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保存文件，并赋予可执行权限&lt;code&gt;chmod +x /etc/init.wsl&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在Windows下，&lt;code&gt;WIN+R&lt;/code&gt;打开&lt;code&gt;运行&lt;/code&gt;对话框，输入&lt;code&gt;shell:startup&lt;/code&gt;打开&lt;code&gt;启动&lt;/code&gt;目录，新建vbs脚本&lt;code&gt;start_centos_service.vbs&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Set ws = WScript.CreateObject("WScript.Shell")
 ws.run "wsl -d CentOS7 -u root /etc/init.wsl start", vbhide&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows重启后，将自动执行该vbs脚本，并完成sshd自启动。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content><link href="/Blog-With-GitHub-Boilerplate/archives/centos76_env_prepare/" rel="alternate"/><published>2020-01-09T12:50:00+08:06</published></entry><entry><id>/Blog-With-GitHub-Boilerplate/archives/github_proxy_setup/</id><title>github代理设置</title><updated>2020-02-05T09:25:48.060421+00:00</updated><author><name>None</name><email>sdyk88@gmail.com</email><uri>https://www.google.com</uri></author><content>&lt;div class="notice"&gt;假定代理地址为&lt;code&gt;socks5://127.0.0.1:10808&lt;/code&gt;&lt;/div&gt;&lt;h2&gt;HTTP/HTTPS方式&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;针对&lt;code&gt;https://github.com/xxxx/xx.git&lt;/code&gt;这样的地址。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;使用git本身的配置即可实现。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;### 设置全局代理&lt;/span&gt;
git config --global http.proxy &lt;span class="s1"&gt;&amp;#39;socks5://127.0.0.1:10808&amp;#39;&lt;/span&gt;
git config --global https.proxy &lt;span class="s1"&gt;&amp;#39;socks5://127.0.0.1:10808&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;### 只对github.com&lt;/span&gt;
git config --global http.https://github.com.proxy &lt;span class="s1"&gt;&amp;#39;socks5://127.0.0.1:10808&amp;#39;&lt;/span&gt;
git config --global https.https://github.com.proxy &lt;span class="s1"&gt;&amp;#39;socks5://127.0.0.1:10808&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;### 取消代理&lt;/span&gt;
git config --global --unset http.proxy
git config --global --unset https.proxy
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;SSH方式&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;针对&lt;code&gt;git@github.com:xxxx/xx.git&lt;/code&gt;这样的地址。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;~/.ssh/config&lt;/code&gt;的&lt;code&gt;ProxyCommand&lt;/code&gt;配置实现。&lt;/p&gt;
&lt;p&gt;如果22端口被墙，可以使用&lt;a href="https://help.github.com/en/github/authenticating-to-github/using-ssh-over-the-https-port"&gt;Using SSH over the HTTPS port&lt;/a&gt;的方式实现，设置&lt;code&gt;Hostname ssh.github.com&lt;/code&gt;及&lt;code&gt;Port 443&lt;/code&gt;即可。&lt;/p&gt;
&lt;h3&gt;Linux/WSL&lt;/h3&gt;
&lt;p&gt;Linux或WSL下，需要结合&lt;code&gt;nc&lt;/code&gt;工具使用。增加如下配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host github.com
    User git
    Port 22
    Hostname github.com
    ProxyCommand nc --proxy-type socks5 --proxy 127.0.0.1:10808 %h %p&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Windows&lt;/h3&gt;
&lt;p&gt;Windows下，需要结合&lt;code&gt;git bash&lt;/code&gt;自带的&lt;code&gt;connect&lt;/code&gt;工具使用。增加如下配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host github.com
    User git
    Port 22
    Hostname github.com
    ProxyCommand connect -S 127.0.0.1:10808 %h %p&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;GIT协议方式&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;针对&lt;code&gt;git://github.com/xxxx/xx.git&lt;/code&gt;这样的地址。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;待定&lt;/p&gt;
</content><link href="/Blog-With-GitHub-Boilerplate/archives/github_proxy_setup/" rel="alternate"/><published>2020-01-30T22:50:00+08:06</published></entry><entry><id>/Blog-With-GitHub-Boilerplate/archives/vim8_install/</id><title>VIM8安装</title><updated>2020-02-05T09:25:48.060359+00:00</updated><author><name>None</name><email>sdyk88@gmail.com</email><uri>https://www.google.com</uri></author><content>&lt;h2&gt;系统环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows 10 1809&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yuk7/CentWSL"&gt;CentWSL 7.6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;使用yum安装&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此方式有一定局限性，建议直接从源码编译。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;CentOS7自带的VIM版本，依然停留在7.4，可以通过第三方源更新到VIM8版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rpm -Uvh http://mirror.ghettoforge.org/distributions/gf/gf-release-latest.gf.el7.noarch.rpm
rpm --import http://mirror.ghettoforge.org/distributions/gf/RPM-GPG-KEY-gf.el7
yum --enablerepo&lt;span class="o"&gt;=&lt;/span&gt;gf-plus update vim-*
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该方法可以不必卸载老版本的vi，&lt;strong&gt;缺点是该源的版本是8.0.3，并且自带feature不支持python3&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;从源码安装&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;取源码分支最好选取8.1之后的版本，异步功能更健壮，很多插件也推荐。&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;卸载自带的vim：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rpm -e --nodeps vim-minimal &lt;span class="c1"&gt;# 单独卸载vi而不删除sudo&lt;/span&gt;
 yum remove vim-* &lt;span class="c1"&gt;# 卸载其他vim&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装编译依赖，包括但不限于：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install ncurses-devel
 yum install python-devel python3-devel  &lt;span class="c1"&gt;# python插件支持&lt;/span&gt;
 yum install perl-devel perl-ExtUtils-Embed perl-ExtUtils-ParseXS perl-ExtUtils-XSpp perl-ExtUtils-CBuilder  &lt;span class="c1"&gt;# perl插件支持&lt;/span&gt;
 yum install lua-devel   &lt;span class="c1"&gt;# lua插件支持&lt;/span&gt;
 yum install ruby-devel  &lt;span class="c1"&gt;# ruby插件支持&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载&lt;a href="https://github.com/vim/vim"&gt;VIM源码&lt;/a&gt;，本例使用的tag是v8.2.0210。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按下面步骤编译安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 进入到源码根目录下&lt;/span&gt;
 ./configure --enable-multibyte --enable-cscope &lt;span class="se"&gt;\&lt;/span&gt;
     --enable-luainterp&lt;span class="o"&gt;=&lt;/span&gt;yes &lt;span class="se"&gt;\&lt;/span&gt;
     --enable-perlinterp&lt;span class="o"&gt;=&lt;/span&gt;yes &lt;span class="se"&gt;\&lt;/span&gt;
     --enable-pythoninterp&lt;span class="o"&gt;=&lt;/span&gt;yes &lt;span class="se"&gt;\&lt;/span&gt;
     --enable-python3interp&lt;span class="o"&gt;=&lt;/span&gt;yes &lt;span class="se"&gt;\&lt;/span&gt;
     --enable-rubyinterp&lt;span class="o"&gt;=&lt;/span&gt;yes &lt;span class="se"&gt;\&lt;/span&gt;
     --prefix&lt;span class="o"&gt;=&lt;/span&gt;/opt/vim   &lt;span class="c1"&gt;# 安装到/opt/vim下&lt;/span&gt;
 make    &lt;span class="c1"&gt;# 不要带-j，容易报错&lt;/span&gt;
 make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;增加&lt;code&gt;/opt/vim/bin&lt;/code&gt;到&lt;code&gt;$PATH&lt;/code&gt;中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;/opt/vim/bin/vim&lt;/code&gt;软连接到&lt;code&gt;/usr/bin/vi&lt;/code&gt;处，使&lt;code&gt;visudo&lt;/code&gt;能正常工作。&lt;/li&gt;
&lt;li&gt;如要卸载，删掉&lt;code&gt;/opt/vim&lt;/code&gt;目录，还原步骤5、6的操作即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;制作自己的RPM包&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;略&lt;/em&gt;&lt;/p&gt;
</content><link href="/Blog-With-GitHub-Boilerplate/archives/vim8_install/" rel="alternate"/><published>2020-02-05T15:20:00+08:06</published></entry></feed>